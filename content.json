{"meta":{"title":"phoenix's blog","subtitle":"phoenix","description":"acm","author":"hdy","url":"http://yoursite.com","root":"/"},"pages":[{"title":"404","text":"","path":"404/index.html","date":"11-11","excerpt":""},{"title":"categories","text":"","path":"categories/index.html","date":"11-11","excerpt":""},{"title":"tags","text":"","path":"tags/index.html","date":"11-11","excerpt":""},{"title":"search","text":"","path":"search/index.html","date":"11-11","excerpt":""}],"posts":[{"title":"线段树","text":"线段树模板 用于处理区间问题 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132#include&lt;bits/stdc++.h&gt;#define ll long long#define dl double#define fo(i,a,b) for (int i=a;i&lt;=b;i++)#define println(x)&#123;printf(\":\\n\");for (int tmpi=1;tmpi&lt;=n;tmpi++)printf(\"%d \",x[i]);printf(\"\\n\");&#125;using namespace std;const int N=1e5+7;const int INF=0x3f3f3f3f;const int M=1e9+7;class poi&#123;public: ll l,r,sum,maxx,add,lc,rc;&#125;;class seg&#123;public: vector&lt;poi&gt; s; void bulid(ll x)&#123; if (s[x].lc) return; ll l=s[x].l,r=s[x].r,mid=(l+r)&gt;&gt;1; s.push_back((poi)&#123;l,mid,0,0,0,0,0&#125;); s[x].lc=s.size()-1; s.push_back((poi)&#123;mid+1,r,0,0,0,0,0&#125;); s[x].rc=s.size()-1;&#125;void pushdown(ll x)&#123; bulid(x); ll lc=s[x].lc,rc=s[x].rc; s[lc].add+=s[x].add; s[lc].sum+=s[x].add*(s[lc].r-s[lc].l+1); s[rc].add+=s[x].add; s[rc].sum+=s[x].add*(s[rc].r-s[rc].l+1); updata(x);&#125;void updata(ll x)&#123; s[x].add=0; s[x].sum=s[s[x].lc].sum+s[s[x].rc].sum; s[x].maxx=max(s[s[x].lc].maxx,s[s[x].rc].maxx);&#125;void add(ll x,ll l,ll r,ll t)&#123; if (l&lt;=s[x].l&amp;&amp;s[x].r&lt;=r)&#123; s[x].sum+=t*(s[x].r-s[x].l+1); s[x].add+=t; s[x].maxx+=t; return; &#125; else&#123; pushdown(x); if (l&lt;=s[s[x].lc].r)&#123; add(s[x].lc,l,r,t); &#125; if (r&gt;=s[s[x].rc].l)&#123; add(s[x].rc,l,r,t); &#125; updata(x); &#125;&#125;ll query_sum(ll x,ll l,ll r)&#123; if (l&lt;=s[x].l&amp;&amp;s[x].r&lt;=r)&#123; return s[x].sum; &#125; else&#123; pushdown(x); ll tmp=0; if (l&lt;=s[s[x].lc].r)&#123; tmp+=query_sum(s[x].lc,l,r); &#125; if (r&gt;=s[s[x].rc].l)&#123; tmp+=query_sum(s[x].rc,l,r); &#125; return tmp; &#125;&#125;ll query_max(ll x,ll l,ll r)&#123; if (l&lt;=s[x].l&amp;&amp;s[x].r&lt;=r)&#123; return s[x].maxx; &#125; else&#123; pushdown(x); ll tmp=0; if (l&lt;=s[s[x].lc].r)&#123; tmp=max(tmp,query_max(s[x].lc,l,r)); &#125; if (r&gt;=s[s[x].rc].l)&#123; tmp=max(tmp,query_max(s[x].rc,l,r)); &#125; return tmp; &#125;&#125;&#125;tree;int n;int m;ll l,r,t;ll a;void read()&#123; scanf(\"%d\",&amp;n); tree.s.push_back((poi)&#123;1,n,0,0,0,0&#125;); for (int i=1;i&lt;=n;i++)&#123; scanf(\"%lld\",&amp;a); tree.add(0,i,i,a); &#125; tree.add(0,1,2,4); cout&lt;&lt;tree.query_max(0,1,4); /*scanf(\"%d\",&amp;m);char ch[5];for (int i=1;i&lt;=m;i++)&#123; scanf(\"%s\",ch); if (ch[0]=='S')&#123; scanf(\"%lld%lld\",&amp;l,&amp;r); printf(\"%lld\\n\",tree.sum(0,l,r)); &#125; if (ch[0]=='A')&#123; scanf(\"%lld%lld%lld\",&amp;l,&amp;r,&amp;t); tree.add(0,l,r,t); &#125;&#125;*/&#125;int main()&#123; read(); return 0;&#125;","path":"2019/11/12/article-name/","date":"11-12","excerpt":"","tags":[{"name":"线段树","slug":"线段树","permalink":"http://yoursite.com/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"}]},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","path":"2019/11/11/hello-world/","date":"11-11","excerpt":"","tags":[]}]}