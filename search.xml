<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2020牛客暑期多校训练营（第二场）</title>
      <link href="/2020/07/16/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%BA%8C%E5%9C%BA%EF%BC%89/"/>
      <url>/2020/07/16/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%BA%8C%E5%9C%BA%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="A-All-with-Pairs"><a href="#A-All-with-Pairs" class="headerlink" title="A  All with Pairs"></a>A <a href="https://ac.nowcoder.com/acm/contest/5667/A" target="_blank" rel="noopener"> All with Pairs</a></h2><p>因为是si的前缀去匹配sj的后缀，正好，AC自动机的fail指针是由后缀指向前缀，我们只需要根据fail指针反向建图，然后在从根节点去遍历， 但是只有最长的才有贡献，所以要不断地更新他的长度，当一个点根据fail指针指向另一个点时，这时可以在res上加上临时的贡献这个时候是指si到sj的匹配和sj本身对自己的匹配，最后别忘记回溯。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod =<span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ACtree</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> tr[N][<span class="number">26</span>], tot;</span><br><span class="line"><span class="keyword">int</span> e[N], fail[N],len[N],c[N];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; q[N],g[N];</span><br><span class="line"><span class="built_in">stack</span>&lt;pii&gt; st;</span><br><span class="line">ll res=<span class="number">0</span>,ans=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">char</span> *s,<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> u = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; s[i]; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!tr[u][s[i] - <span class="string">'a'</span>]) tr[u][s[i] - <span class="string">'a'</span>] = ++tot;</span><br><span class="line">    u = tr[u][s[i] - <span class="string">'a'</span>];</span><br><span class="line">    len[u]=i;<span class="comment">//u节点的长度</span></span><br><span class="line">    q[u].pb(x);<span class="comment">//看看u这个点都属于哪个字符串</span></span><br><span class="line">  &#125;</span><br><span class="line">  e[u]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++)</span><br><span class="line">    <span class="keyword">if</span> (tr[<span class="number">0</span>][i]) q.push(tr[<span class="number">0</span>][i]);</span><br><span class="line">    <span class="keyword">while</span> (q.<span class="built_in">size</span>()) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (tr[u][i]) fail[tr[u][i]] = tr[fail[u]][i], q.push(tr[u][i]);</span><br><span class="line">            <span class="keyword">else</span> tr[u][i] = tr[fail[u]][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tot;i++) g[fail[i]].pb(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span><span class="comment">//遍历</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x:q[u])</span><br><span class="line">    &#123;</span><br><span class="line">        st.push(mp(x,c[x]));<span class="comment">//放入，回溯时会用到</span></span><br><span class="line">        res=(res-c[x]+mod)%mod;</span><br><span class="line">        c[x]=<span class="number">1l</span>l*len[u]*len[u]%mod;</span><br><span class="line">        res=(res+c[x]+mod)%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    ans=(ans+<span class="number">1l</span>l*res*e[u]%mod)%mod;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x:g[u])</span><br><span class="line">    &#123;</span><br><span class="line">        dfs(x);<span class="comment">//将根据fail指针建图的点遍历；</span></span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x:q[u])</span><br><span class="line">        &#123;</span><br><span class="line">            pii tmp = st.top();</span><br><span class="line">            st.pop();</span><br><span class="line">            res=((res-c[tmp.fi])+mod)%mod;</span><br><span class="line">            c[tmp.fi]=tmp.se;</span><br><span class="line">            res=(res+c[tmp.fi]+mod)%mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="function">ll <span class="title">begin</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        dfs(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125; AC; <span class="comment">// namespace AC</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s + <span class="number">1</span>), AC.insert(s,i);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s + <span class="number">1</span>);</span><br><span class="line">  AC.build();</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%lld"</span>, AC.<span class="built_in">begin</span>());</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Boundary"><a href="#B-Boundary" class="headerlink" title="B Boundary"></a>B<a href="https://ac.nowcoder.com/acm/contest/5667/B" target="_blank" rel="noopener"> Boundary</a></h2><p>三个点可以确定一个圆心，因为毕竟过（0，0），所以只需要记录他的圆心，然后在找哪个圆心最多就行了(qrnb)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fo(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> read(x) scanf(<span class="meta-string">"%d"</span>,&amp;x)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> dl;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e4</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">poi</span>&#123;</span></span><br><span class="line">    ll x,y;</span><br><span class="line">&#125;pos[N];</span><br><span class="line"> </span><br><span class="line">ll cnt[N];</span><br><span class="line"> </span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;dl,dl&gt; &gt; ls;</span><br><span class="line"> </span><br><span class="line">ll a,b,c,d,e,f;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">getCenterPos</span><span class="params">(ll x2,ll y2,ll x3,ll y3)</span></span>&#123;</span><br><span class="line">    ll x1=<span class="number">0</span>,y1=<span class="number">0</span>;</span><br><span class="line">   </span><br><span class="line">  dl x=((y2-y1)*(y3*y3-y1*y1+x3*x3-x1*x1)-(y3-y1)*(y2*y2-y1*y1+x2*x2-x1*x1))/(<span class="number">2.0</span>*((x3-x1)*(y2-y1)-(x2-x1)*(y3-y1)));</span><br><span class="line">  dl y=((x2-x1)*(x3*x3-x1*x1+y3*y3-y1*y1)-(x3-x1)*(x2*x2-x1*x1+y2*y2-y1*y1))/(<span class="number">2.0</span>*((y3-y1)*(x2-x1)-(y2-y1)*(x3-x1)));</span><br><span class="line">    ls.push_back(&#123;x,y&#125;);</span><br><span class="line"><span class="comment">//  printf("%lf %lf\n",x,y);</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">1</span>,base=<span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;;i++)&#123;</span><br><span class="line">        sum+=i;</span><br><span class="line">        <span class="keyword">if</span> (x&lt;sum) <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-6</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(pair&lt;dl,dl&gt; a,pair&lt;dl,dl&gt; b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">abs</span>(a.first-b.first)&lt;eps)</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">abs</span>(a.second-b.second)&lt;eps)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;pos[i].x,&amp;pos[i].y);</span><br><span class="line">        <span class="keyword">if</span> (pos[i].x==<span class="number">0</span>&amp;&amp;pos[i].y==<span class="number">0</span>)&#123;</span><br><span class="line">            n--;</span><br><span class="line">            i--;</span><br><span class="line">            base++;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line"><span class="comment">//          printf("%d %d: ",i,j);</span></span><br><span class="line">            getCenterPos(pos[i].x,pos[i].y,pos[j].x,pos[j].y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(ls.<span class="built_in">begin</span>(),ls.<span class="built_in">end</span>());</span><br><span class="line">    pair&lt;dl,dl&gt; pre=&#123;<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    ls.push_back(&#123;<span class="number">0</span>,<span class="number">0</span>&#125;);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> x:ls)&#123;</span><br><span class="line"><span class="comment">//      printf("%lf %lf\n",x.first,x.second);</span></span><br><span class="line">        <span class="keyword">if</span> (cmp(x,pre)==<span class="literal">true</span>)&#123;</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            ans=<span class="built_in">max</span>(ans,cal(cnt));</span><br><span class="line"><span class="comment">//          cout&lt;&lt;cnt&lt;&lt;endl;</span></span><br><span class="line">            cnt=<span class="number">1</span>;</span><br><span class="line">            pre=x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,ans+base);</span><br><span class="line"><span class="comment">//  cout&lt;&lt;base;</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//  ios::sync_with_stdio(0);</span></span><br><span class="line"><span class="comment">//  cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="comment">//  int T;read(T);</span></span><br><span class="line"><span class="comment">//  for(int i=1;i&lt;=T;i++)</span></span><br><span class="line">        solve();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Cover-the-Tree"><a href="#C-Cover-the-Tree" class="headerlink" title="C Cover the Tree"></a>C <a href="https://ac.nowcoder.com/acm/contest/5667/C" target="_blank" rel="noopener">Cover the Tree</a></h2><p>根据叶子节点去匹配就好了。。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fo(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> read(x) scanf(<span class="meta-string">"%d"</span>,&amp;x)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> dl;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">3e5</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> deg[N];</span><br><span class="line"><span class="keyword">int</span> fa[N];</span><br><span class="line"><span class="keyword">int</span> vis[N];</span><br><span class="line"><span class="keyword">int</span> link[N];</span><br><span class="line"><span class="keyword">int</span> ls[N],tot=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[N];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    vis[x]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (deg[x]==<span class="number">1</span>)&#123;</span><br><span class="line">        ls[++tot]=x;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> to:G[x])&#123;</span><br><span class="line">        <span class="keyword">if</span> (vis[to]==<span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">        dfs(to);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">out</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a&gt;b) swap(a,b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,a,b);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">int</span> u,v;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;u,&amp;v);</span><br><span class="line">        deg[u]++;</span><br><span class="line">        deg[v]++;</span><br><span class="line">        G[u].push_back(v);</span><br><span class="line">        G[v].push_back(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (deg[i]!=<span class="number">1</span>)&#123;</span><br><span class="line">            dfs(i);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">    m=(tot+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,j=m+<span class="number">1</span>;i&lt;=tot/<span class="number">2</span>;i++,j+=<span class="number">3</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (j&gt;tot)&#123;</span><br><span class="line">            j=m+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(vis[j]==<span class="number">1</span>)&#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//      cout&lt;&lt;i&lt;&lt;" "&lt;&lt;j&lt;&lt;endl;</span></span><br><span class="line">        vis[i]=vis[j]=<span class="number">1</span>;</span><br><span class="line">        out(ls[i],ls[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (tot%<span class="number">2</span>==<span class="number">1</span>) out(ls[<span class="number">1</span>],ls[m]);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//  ios::sync_with_stdio(0);</span></span><br><span class="line"><span class="comment">//  cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="comment">//  int T;read(T);</span></span><br><span class="line"><span class="comment">//  for(int i=1;i&lt;=T;i++)</span></span><br><span class="line">        solve();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Duration"><a href="#D-Duration" class="headerlink" title="D  Duration"></a>D  <a href="https://ac.nowcoder.com/acm/contest/5667/D" target="_blank" rel="noopener">Duration</a></h2><p>这个都会。</p><h2 id="E-Exclusive-OR"><a href="#E-Exclusive-OR" class="headerlink" title="E Exclusive OR"></a>E <a href="https://ac.nowcoder.com/acm/contest/5667/E" target="_blank" rel="noopener">Exclusive OR</a></h2><p>不会</p><h2 id="F-Fake-Maxpooling"><a href="#F-Fake-Maxpooling" class="headerlink" title="F Fake Maxpooling"></a>F <a href="https://ac.nowcoder.com/acm/contest/5667/F" target="_blank" rel="noopener">Fake Maxpooling</a></h2><p>这个可以用二维RMQ或者二维单调队列去写</p><p>详细的blog可以去看 <a href="https://www.luogu.com.cn/problem/solution/P2216" target="_blank" rel="noopener">https://www.luogu.com.cn/problem/solution/P2216</a> </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 5010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; Q[N],Q2[N];</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">ll mz[N][N];</span><br><span class="line">ll mn[N][N],mx[N][N];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> a,b,n;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;a,&amp;b,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=a; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=b; j++) &#123;</span><br><span class="line">             </span><br><span class="line">            mz[i][j]=(<span class="number">1l</span>l)*i/__gcd(i,j)*j; </span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=a; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=b; j++) &#123;</span><br><span class="line">            ll now=mz[i][j];</span><br><span class="line">      </span><br><span class="line">            <span class="keyword">while</span>(!Q2[i].empty() &amp;&amp; now&gt;=mz[i][Q2[i].back()]) Q2[i].pop_back();</span><br><span class="line">            Q2[i].push_back(j);</span><br><span class="line">            <span class="keyword">while</span>(Q2[i].back()-Q2[i].front()+<span class="number">1</span>&gt;n) Q2[i].pop_front();</span><br><span class="line">            <span class="keyword">if</span>(j&gt;=n) mx[i][j]=mz[i][Q2[i].front()];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;      </span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=n; j&lt;=b; j++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i+n<span class="number">-1</span>&lt;=a; i++) &#123;</span><br><span class="line">            ll mxv=<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> d=<span class="number">0</span>; d&lt;n; d++) mxv=<span class="built_in">max</span>(mxv,mx[i+d][j]);</span><br><span class="line">            ans+=mxv;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="G-Greater-and-Greater"><a href="#G-Greater-and-Greater" class="headerlink" title="G  Greater and Greater"></a>G  <a href="https://ac.nowcoder.com/acm/contest/5667/G" target="_blank" rel="noopener">Greater and Greater</a></h2><p>出题人说看下数据就知道bitset（现在我还不知道为什么要用bitset），就是先用bitset在a[i]中找比b[i]大的数将其为1，顺序要按b[i]的大小，同时记录他们的位置，因为要比b数组都大，所以<img src="https://i.loli.net/2020/07/16/Mm4AxRzhweSKYPb.png" alt="QQ图片20200716195216.png"></p><p>满足这样就好了，b在哪个位置，就需要向右移动它本身的位置数-1这样才能满足图片上的匹配，只需要最后统计bitset有多少个1.</p><p><img src="https://i.loli.net/2020/07/16/zFdqusCMXnQmkEr.png" alt="QQ图片20200716200717.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">150010</span>,maxn=<span class="number">40010</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">bitset</span>&lt;MAXN&gt;ans,w;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[MAXN],b[maxn];</span><br><span class="line"><span class="keyword">int</span> c[MAXN],p[MAXN];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">cmp1</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;<span class="keyword">return</span> a[x]&gt;a[y];&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">cmp2</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;<span class="keyword">return</span> b[x]&gt;b[y];&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a[i],p[i]=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;b[i],c[i]=i;</span><br><span class="line">sort(p+<span class="number">1</span>,p+<span class="number">1</span>+n,cmp1);</span><br><span class="line">sort(c+<span class="number">1</span>,c+<span class="number">1</span>+m,cmp2);</span><br><span class="line"><span class="keyword">int</span> flag=<span class="number">1</span>;</span><br><span class="line">ans.<span class="built_in">set</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(a[p[flag]]&gt;=b[c[i]]&amp;&amp;flag&lt;=n)</span><br><span class="line">&#123;</span><br><span class="line">w[p[flag]]=<span class="number">1</span>;</span><br><span class="line">++flag;</span><br><span class="line">&#125;</span><br><span class="line">ans=ans&amp;(w&gt;&gt;c[i]<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans.count();<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="H-Happy-Triangle"><a href="#H-Happy-Triangle" class="headerlink" title="H  Happy Triangle"></a>H  <a href="https://ac.nowcoder.com/acm/contest/5667/H" target="_blank" rel="noopener">Happy Triangle</a></h2><p>这个滑稽姐姐的blog写的挺好的肯定能看懂（ <a href="https://www.acwing.com/user/myspace/index/2776/" target="_blank" rel="noopener">https://www.acwing.com/user/myspace/index/2776/</a> ）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N =<span class="number">2e5</span>+<span class="number">5</span>,inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> lower_bound(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), x) - v.<span class="built_in">begin</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r;</span><br><span class="line">    <span class="keyword">int</span> low,h1,h2,b;<span class="comment">//low为区间中包含的最小的元素的下标（没有数时为-1）</span></span><br><span class="line">                    <span class="comment">//h1为区间中包含的最大的元素的下标（没有数时为-1）</span></span><br><span class="line">                    <span class="comment">//h2 为区间中包含的次大的元素的下标（没有数时为-1）</span></span><br><span class="line">    <span class="keyword">int</span> sz;<span class="comment">//为区间中包含的元素个数</span></span><br><span class="line">&#125;tr[N&lt;&lt;<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">tr[u]=&#123;l,r,<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, inf, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">if</span>(l==r) <span class="keyword">return</span> ;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">build(u&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">build(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(node &amp;u,node &amp;left,node &amp;right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u.sz=left.sz+right.sz;</span><br><span class="line"><span class="keyword">if</span>(left.sz) u.low=left.low;</span><br><span class="line"><span class="keyword">else</span> u.low=right.low;</span><br><span class="line"><span class="keyword">int</span> h[<span class="number">4</span>]=&#123;left.h2,left.h1,right.h1,right.h2&#125;;</span><br><span class="line">sort(h,h+<span class="number">4</span>);</span><br><span class="line">u.h2=h[<span class="number">2</span>];</span><br><span class="line">u.h1=h[<span class="number">3</span>];</span><br><span class="line">u.b = <span class="built_in">min</span>(left.b, right.b);</span><br><span class="line"><span class="keyword">if</span>(left.sz <span class="keyword">and</span> right.sz) u.b=<span class="built_in">min</span>(u.b,v[right.low]-v[left.h1]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pushup(tr[u],tr[u&lt;&lt;<span class="number">1</span>],tr[u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> x,<span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tr[u].l==x&amp;&amp;tr[u].r==x)</span><br><span class="line">&#123;</span><br><span class="line">tr[u].sz+=c;</span><br><span class="line"><span class="keyword">if</span>(tr[u].sz&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">tr[u].low=<span class="number">-1</span>,tr[u].h1=<span class="number">-1</span>,tr[u].h2=<span class="number">-1</span>;</span><br><span class="line">tr[u].b=inf;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(tr[u].sz==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">tr[u].low=x,tr[u].h1=x,tr[u].h2=<span class="number">-1</span>,tr[u].b=inf;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">tr[u].b=<span class="number">0</span>;</span><br><span class="line">tr[u].h1=x,tr[u].h2=x,tr[u].low=x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid=tr[u].l+tr[u].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid) modify(u&lt;&lt;<span class="number">1</span>,x,c);</span><br><span class="line"><span class="keyword">else</span> modify(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,x,c);</span><br><span class="line">pushup(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">node <span class="title">query</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tr[u].l&gt;=l&amp;&amp;tr[u].r&lt;=r) <span class="keyword">return</span> tr[u];</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> mid=tr[u].l+tr[u].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(r&lt;=mid) <span class="keyword">return</span> query(u&lt;&lt;<span class="number">1</span>,l,r);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(l&gt;mid) <span class="keyword">return</span> query(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r);</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">auto</span> q1=query(u&lt;&lt;<span class="number">1</span>,l,r);</span><br><span class="line"><span class="keyword">auto</span> q2=query(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r);</span><br><span class="line">node res;</span><br><span class="line">pushup(res,q1,q2);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> op[N],x[N];</span><br><span class="line">    <span class="keyword">int</span> q;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=q;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;op[i]&gt;&gt;x[i];</span><br><span class="line">v.push_back(x[i]);</span><br><span class="line">&#125;</span><br><span class="line">v.push_back(<span class="number">-1</span>);</span><br><span class="line">sort(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line">    v.erase(unique(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>()), v.<span class="built_in">end</span>());<span class="comment">//离散化； </span></span><br><span class="line">build(<span class="number">1</span>,<span class="number">0</span>,v.<span class="built_in">size</span>()<span class="number">-1</span>); </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=q;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(op[i]==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">modify(<span class="number">1</span>,<span class="built_in">find</span>(x[i]),<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(op[i]==<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">modify(<span class="number">1</span>,<span class="built_in">find</span>(x[i]),<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">continue</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line">node q1=query(<span class="number">1</span>,<span class="number">0</span>,<span class="built_in">find</span>(x[i])<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">if</span>(q1.sz&gt;=<span class="number">2</span>&amp;&amp;v[q1.h1]+v[q1.h2]&gt;x[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Yes"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">node q2=query(<span class="number">1</span>,<span class="built_in">find</span>(x[i]),v.<span class="built_in">size</span>()<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">if</span>(q2.sz)</span><br><span class="line">&#123;</span><br><span class="line">q1.b=inf;</span><br><span class="line">node res;</span><br><span class="line">pushup(res,q1,q2);</span><br><span class="line"><span class="keyword">if</span>(res.b&lt;x[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Yes"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"No"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 训练 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sort</title>
      <link href="/2019/11/17/sort/"/>
      <url>/2019/11/17/sort/</url>
      
        <content type="html"><![CDATA[<h1 id="1-结构体"><a href="#1-结构体" class="headerlink" title="1.结构体"></a>1.结构体</h1><h2 id="1-只有结构体定义"><a href="#1-只有结构体定义" class="headerlink" title="1.只有结构体定义"></a>1.只有结构体定义</h2> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> a;</span><br><span class="line">  <span class="keyword">float</span> b;</span><br><span class="line">  <span class="keyword">char</span> job[<span class="number">20</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-定义一个结构体变量"><a href="#2-定义一个结构体变量" class="headerlink" title="2.定义一个结构体变量"></a>2.定义一个结构体变量</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node  acm;</span><br></pre></td></tr></table></figure><h2 id="3-结构体之间的赋值"><a href="#3-结构体之间的赋值" class="headerlink" title="3.结构体之间的赋值"></a>3.结构体之间的赋值</h2><p>如果我有一个结构体node a，但是我想在定义一个结构体(node b)并且让这个新定义的结构体( b )里面的值都和之前的结构体 a相同 。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node b;</span><br><span class="line">b=a;</span><br></pre></td></tr></table></figure><h1 id="4-结构体的引用"><a href="#4-结构体的引用" class="headerlink" title="4.结构体的引用"></a>4.结构体的引用</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> sorce;</span><br><span class="line"><span class="keyword">char</span> name[<span class="number">20</span>] ;</span><br><span class="line">&#125;</span><br><span class="line">node chengjidan；</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;chengjidan.sorce&gt;&gt;chengjidan.name;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"name: "</span>&lt;&lt;chengjidan.name&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"sorce: "</span>&lt;&lt;chengjidan.sorce&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-结构体的运算符重载"><a href="#5-结构体的运算符重载" class="headerlink" title="5.结构体的运算符重载"></a>5.结构体的运算符重载</h1><h1 id="2-sort"><a href="#2-sort" class="headerlink" title="2.sort"></a>2.sort</h1><h2 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h2><p>sort 排序函数是在 C++ 中的一个库函数，它所在的头文件 为 algrithm.h，它其实就是对快速排序算法的封装，只需要 一行代码即可实现快速排序 它的时间复杂度为 O(n∗log(n)) 形式：sort(参数一, 参数二，参数三） 使用范围: 数组结构体 sting 队列 vector……</p><h2 id="使用方法："><a href="#使用方法：" class="headerlink" title="使用方法："></a>使用方法：</h2><p>对数组 a 从小到大排序 </p><figure class="highlight plain"><figcaption><span>a[5]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">```\</span><br><span class="line">对数据类型 Y 排序 sort(地址 1，地址 2，less&lt;Y&gt;());</span><br><span class="line">//以Y为int为例 int a[5]=&#123;2,1,3,4,5&#125;; sort(a,a+5,less&lt;int&gt;()); </span><br><span class="line">//less&lt;int&gt;()升序 </span><br><span class="line">//greater&lt;int&gt;()降序</span><br></pre></td></tr></table></figure><h3 id="自己定义sort排序"><a href="#自己定义sort排序" class="headerlink" title="自己定义sort排序"></a>自己定义sort排序</h3><p>自定义排序</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123; <span class="keyword">return</span> a&lt;b;  <span class="comment">//从小到大排序 </span></span><br><span class="line"><span class="keyword">return</span> a&gt;b;  <span class="comment">//从大到小排序 &#125;</span></span><br><span class="line">sort(a,a+n,cmp)</span><br></pre></td></tr></table></figure><p>结构体排序</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp1</span><span class="params">(node a,node b)</span></span>&#123;<span class="comment">//自定义排序函数</span></span><br><span class="line"><span class="keyword">if</span>(a.grade!=b.grade) <span class="keyword">return</span> a.grade&gt;b,grade;</span><br><span class="line"><span class="keyword">return</span> a.id&lt;b.id;<span class="comment">//按照id排序 ，a&lt;b表示升序 ，a&gt;b降序 &#125; </span></span><br><span class="line">sort(a,a+n,cmp1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-栈和队列"><a href="#3-栈和队列" class="headerlink" title="3.栈和队列"></a>3.栈和队列</h1><p>栈和队列是一种特殊的线性表，其区别在于栈是<strong>先进后出</strong>像 一个瓶子，而队列是<strong>先进先出</strong>像排队</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">stack</span> &lt;<span class="keyword">int</span>&gt; s;<span class="comment">//定义一个int型</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.push(<span class="number">2</span>);<span class="comment">// 把2从栈顶压</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s. pop ();<span class="comment">//弹出栈顶元素</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s. empty ();<span class="comment">//判断栈是否为 空</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s. <span class="built_in">size</span> ();<span class="comment">// 栈的大小</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">s.top() ;<span class="comment">//返回栈顶的元素，但不删除该元素</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">q.empty()          <span class="comment">//如果队列为空返回true，否则返回false</span></span><br><span class="line">q.<span class="built_in">size</span>()          <span class="comment">// 返回队列中元素的个数</span></span><br><span class="line">q.pop()          <span class="comment">//删除队列首元素但不返回其值</span></span><br><span class="line">q.front()       <span class="comment">// 返回队首元素的值，但不删除该元素</span></span><br><span class="line">q.push()       <span class="comment">//在队尾压入新元素</span></span><br><span class="line">q.back()      <span class="comment">// 返回队列尾元素的值，但不删除该元素</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sort </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kruskal算法求最小生成树（模板）</title>
      <link href="/2019/11/15/s/"/>
      <url>/2019/11/15/s/</url>
      
        <content type="html"><![CDATA[<p>此算法可以称为“加边法”，初始最小生成树边数为0，每迭代一次就选择一条满足条件的最小代价边，加入到最小生成树的边集合里。</p><ol><li>把图中的所有边按代价从小到大排序；</li><li>把图中的n个顶点看成独立的n棵树组成的森林；</li><li>按权值从小到大选择边，所选的边连接的两个顶点ui,viui,vi,应属于两颗不同的树，则成为最小生成树的一条边，并将这两颗树合并作为一颗树。</li><li>重复(3),直到所有顶点都在一颗树内或者有n-1条边为止.</li></ol><p><img src="C:%5CUsers%5C51158%5CDesktop%5CQQ%E5%9B%BE%E7%89%8720191115211022.png" alt="QQ图片20191115211022"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">2e5</span>;</span><br><span class="line"><span class="keyword">int</span> f[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> u;<span class="keyword">int</span> v;<span class="keyword">int</span> w;</span><br><span class="line">&#125;edges[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node a,node b)</span></span>&#123;</span><br><span class="line">   <span class="keyword">return</span>  a.w&lt;b.w;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(f[x]!=x)</span><br><span class="line">f[x]=<span class="built_in">find</span>(f[x]);</span><br><span class="line"><span class="keyword">return</span> f[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">join</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">x=<span class="built_in">find</span>(x);</span><br><span class="line">y=<span class="built_in">find</span>(y);</span><br><span class="line"><span class="keyword">if</span>(x!=y)</span><br><span class="line">f[x]=y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">f[i]=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">cin</span>&gt;&gt;edges[i].u&gt;&gt;edges[i].v&gt;&gt;edges[i].w;</span><br><span class="line">&#125;</span><br><span class="line">sort(edges,edges+m,cmp);</span><br><span class="line"><span class="keyword">int</span> res=<span class="number">0</span>,cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a=edges[i].u;<span class="keyword">int</span> b=edges[i].v;<span class="keyword">int</span> w=edges[i].w;</span><br><span class="line">a=<span class="built_in">find</span>(a),b=<span class="built_in">find</span>(b);</span><br><span class="line"><span class="keyword">if</span>(a!=b)</span><br><span class="line">&#123;</span><br><span class="line">join(a,b);</span><br><span class="line">res+=w;</span><br><span class="line">cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(cnt &lt; n<span class="number">-1</span>) <span class="built_in">cout</span>&lt;&lt;<span class="string">"impossible"</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>codeforces 597 div2 的D 题</title>
      <link href="/2019/11/13/tree/"/>
      <url>/2019/11/13/tree/</url>
      
        <content type="html"><![CDATA[<p>[Shichikuji and Power Grid]<a href="https://codeforces.com/contest/1245/problem/D" target="_blank" rel="noopener">添加链接描述</a><br>codeforces 597 div2 的D 题，<br>题意：在一个二维平面上面，有n个城市，现在每个城市都没有电。<br>你可以选择一些城市建发电站，代价是c[i]；你也可以给每个城市拉电线，给城市(i,j)之间拉电线的代价是(abs(x[i]-x[j])+abs(y[i]-y[j]))*(k[i]+k[j])。<br>现在问你最少花费多少代价，能够使得全部城市都有电，输出方案。</p><p>思路：写的时候无限自闭，最后A了（感谢龙佬），其实思路很简单，就是把这个题变成最小生成树问题就行了，相当于把供电站自身的花费变成了超级远点到供电站的距离，然后套一下最小生成树模板，就行了<br><img src="https://img-blog.csdnimg.cn/20191112221724712.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1ZGluZ3l1MQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int maxn=2e6+10;</span><br><span class="line">#define ll long long </span><br><span class="line">ll f[maxn],r[maxn];</span><br><span class="line">typedef pair&lt;ll,ll&gt; pil;</span><br><span class="line">struct node &#123;</span><br><span class="line">ll x;int y;</span><br><span class="line">&#125;p[maxn];</span><br><span class="line">struct Node &#123;</span><br><span class="line">ll u, v, w;</span><br><span class="line">&#125;P[maxn];</span><br><span class="line">bool cmp(Node a,Node b)</span><br><span class="line">&#123;</span><br><span class="line">return a.w&lt;b.w;</span><br><span class="line">&#125;</span><br><span class="line">bool cmp2(pil a,pil b)</span><br><span class="line">&#123;</span><br><span class="line">return a.first &lt;b.first;</span><br><span class="line">&#125;</span><br><span class="line">ll find(ll x)</span><br><span class="line">&#123;</span><br><span class="line">return f[x]!=x?f[x]=find(f[x]):x;</span><br><span class="line">&#125;</span><br><span class="line">void join(int x,int y)</span><br><span class="line">&#123;</span><br><span class="line">x=find(x);</span><br><span class="line">y=find(y);</span><br><span class="line">if(x!=y)</span><br><span class="line">f[x]=y;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">vector&lt;pil&gt; s,ss;</span><br><span class="line">int main()&#123;</span><br><span class="line">ll n,pos,co;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line">for(int i=0;i&lt;=n;i++) f[i]=i;</span><br><span class="line">    for(int i=1;i&lt;=n;i++) cin&gt;&gt;p[i].x&gt;&gt;p[i].y;</span><br><span class="line">for(int i=1;i&lt;=n;i++)</span><br><span class="line">&#123; </span><br><span class="line">   cin&gt;&gt;co;P[i].u=i;P[i].v=0;P[i].w=co;</span><br><span class="line">&#125;</span><br><span class="line">for(int i=1;i&lt;=n;i++) cin&gt;&gt;r[i];</span><br><span class="line">pos=n+1;</span><br><span class="line">for(int i=1;i&lt;=n;i++)</span><br><span class="line">for(int j=i+1;j&lt;=n;j++)</span><br><span class="line">&#123;</span><br><span class="line">  ll mid=(abs(p[i].x-p[j].x)+abs(p[i].y-p[j].y))*(r[i]+r[j]);</span><br><span class="line">  P[pos].u=j,P[pos].v=i,P[pos++].w=mid;</span><br><span class="line">&#125;</span><br><span class="line">ll sum=0,a=0,b=0;</span><br><span class="line">sort(P+1,P+pos+1,cmp);</span><br><span class="line">for(int i=1;i&lt;=pos;i++)</span><br><span class="line">&#123;</span><br><span class="line">if(find(P[i].u)!=find(P[i].v))</span><br><span class="line">&#123;</span><br><span class="line">join(P[i].u,P[i].v);</span><br><span class="line">sum+=P[i].w;</span><br><span class="line">if(P[i].u!=0&amp;&amp;P[i].v!=0)</span><br><span class="line">a++,s.push_back(make_pair(P[i].u,P[i].v));</span><br><span class="line">else b++,ss.push_back(make_pair(P[i].u,P[i].v));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;sum&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;b&lt;&lt;endl;</span><br><span class="line">sort(ss.begin(),ss.end(),cmp2);</span><br><span class="line">for(int i=0;i&lt;ss.size();i++)</span><br><span class="line">&#123;  ll a1 = ss[i].first, a2 = ss[i].second;</span><br><span class="line">if(a1)</span><br><span class="line">cout&lt;&lt;a1&lt;&lt;&quot; &quot;;</span><br><span class="line">else </span><br><span class="line">cout&lt;&lt;a2&lt;&lt;&quot; &quot;; </span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">for(int i=0;i&lt;s.size();i++)</span><br><span class="line">&#123;</span><br><span class="line">  ll a1 = s[i].first, a2 = s[i].second;</span><br><span class="line">        if (a1 &gt; a2)</span><br><span class="line">        swap(a1, a2);</span><br><span class="line">        cout &lt;&lt; a1 &lt;&lt; &quot; &quot; &lt;&lt; a2 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 最小生成树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线段树</title>
      <link href="/2019/11/12/article-name/"/>
      <url>/2019/11/12/article-name/</url>
      
        <content type="html"><![CDATA[<p>线段树模板 用于处理区间问题 </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dl double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fo(i,a,b) for (int i=a;i&lt;=b;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> println(x)&#123;printf(<span class="meta-string">":\n"</span>);for (int tmpi=1;tmpi&lt;=n;tmpi++)printf(<span class="meta-string">"%d "</span>,x[i]);printf(<span class="meta-string">"\n"</span>);&#125;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">poi</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">ll l,r,sum,maxx,add,lc,rc;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">seg</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">vector</span>&lt;poi&gt; s;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bulid</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (s[x].lc) <span class="keyword">return</span>;</span><br><span class="line">ll l=s[x].l,r=s[x].r,mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">s.push_back((poi)&#123;l,mid,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;);</span><br><span class="line">s[x].lc=s.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">s.push_back((poi)&#123;mid+<span class="number">1</span>,r,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;);</span><br><span class="line">s[x].rc=s.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">bulid(x);</span><br><span class="line">ll lc=s[x].lc,rc=s[x].rc;</span><br><span class="line">s[lc].add+=s[x].add;</span><br><span class="line">s[lc].sum+=s[x].add*(s[lc].r-s[lc].l+<span class="number">1</span>);</span><br><span class="line">s[rc].add+=s[x].add;</span><br><span class="line">s[rc].sum+=s[x].add*(s[rc].r-s[rc].l+<span class="number">1</span>);</span><br><span class="line">updata(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updata</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">s[x].add=<span class="number">0</span>;</span><br><span class="line">s[x].sum=s[s[x].lc].sum+s[s[x].rc].sum;</span><br><span class="line">s[x].maxx=<span class="built_in">max</span>(s[s[x].lc].maxx,s[s[x].rc].maxx);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(ll x,ll l,ll r,ll t)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (l&lt;=s[x].l&amp;&amp;s[x].r&lt;=r)&#123;</span><br><span class="line">s[x].sum+=t*(s[x].r-s[x].l+<span class="number">1</span>);</span><br><span class="line">s[x].add+=t;</span><br><span class="line">s[x].maxx+=t;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">pushdown(x);</span><br><span class="line"><span class="keyword">if</span> (l&lt;=s[s[x].lc].r)&#123;</span><br><span class="line">add(s[x].lc,l,r,t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (r&gt;=s[s[x].rc].l)&#123;</span><br><span class="line">add(s[x].rc,l,r,t);</span><br><span class="line">&#125;</span><br><span class="line">updata(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">query_sum</span><span class="params">(ll x,ll l,ll r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (l&lt;=s[x].l&amp;&amp;s[x].r&lt;=r)&#123;</span><br><span class="line"><span class="keyword">return</span> s[x].sum; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">pushdown(x);</span><br><span class="line">ll tmp=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (l&lt;=s[s[x].lc].r)&#123;</span><br><span class="line">tmp+=query_sum(s[x].lc,l,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (r&gt;=s[s[x].rc].l)&#123;</span><br><span class="line">tmp+=query_sum(s[x].rc,l,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">query_max</span><span class="params">(ll x,ll l,ll r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (l&lt;=s[x].l&amp;&amp;s[x].r&lt;=r)&#123;</span><br><span class="line"><span class="keyword">return</span> s[x].maxx; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">pushdown(x);</span><br><span class="line">ll tmp=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (l&lt;=s[s[x].lc].r)&#123;</span><br><span class="line">tmp=<span class="built_in">max</span>(tmp,query_max(s[x].lc,l,r));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (r&gt;=s[s[x].rc].l)&#123;</span><br><span class="line">tmp=<span class="built_in">max</span>(tmp,query_max(s[x].rc,l,r));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;tree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> m;</span><br><span class="line">ll l,r,t;</span><br><span class="line">ll a;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">tree.s.push_back((poi)&#123;<span class="number">1</span>,n,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a);</span><br><span class="line">tree.add(<span class="number">0</span>,i,i,a);</span><br><span class="line">&#125;</span><br><span class="line">tree.add(<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;tree.query_max(<span class="number">0</span>,<span class="number">1</span>,<span class="number">4</span>);</span><br><span class="line"><span class="comment">/*scanf("%d",&amp;m);</span></span><br><span class="line"><span class="comment">char ch[5];</span></span><br><span class="line"><span class="comment">for (int i=1;i&lt;=m;i++)&#123;</span></span><br><span class="line"><span class="comment">scanf("%s",ch);</span></span><br><span class="line"><span class="comment">if (ch[0]=='S')&#123;</span></span><br><span class="line"><span class="comment">scanf("%lld%lld",&amp;l,&amp;r);</span></span><br><span class="line"><span class="comment">printf("%lld\n",tree.sum(0,l,r));</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">if (ch[0]=='A')&#123;</span></span><br><span class="line"><span class="comment">scanf("%lld%lld%lld",&amp;l,&amp;r,&amp;t);</span></span><br><span class="line"><span class="comment">tree.add(0,l,r,t);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/11/11/hello-world/"/>
      <url>/2019/11/11/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
